#!/bin/sh -e

# Needs AZURE_STORAGE_SAS_TOKEN to be set

: "${AZ_STORAGE_ACCOUNT:=packageskaitai}"
: "${AZ_STORAGE_CONTAINER=test3}"
: "${REPO_DIR=repo0}"
: "${PKGS_SRC:=all_pkgs/*.deb}"

SCRIPT_DIR=$(dirname $0)

show_summary_info()
{
	cat <<EOF
"# az-repo-apt-add

- AZ_STORAGE_ACCOUNT: $AZ_STORAGE_ACCOUNT
- AZ_STORAGE_CONTAINER: $AZ_STORAGE_CONTAINER
- REPO_DIR: $REPO_DIR
- PKGS_SRC: $PKGS_SRC
EOF

	for I in $PKGS_SRC; do
		ls -al "$I"
	done

	echo -n '- GPG_PRIV_KEY: '
	[ -n "$GPG_PRIV_KEY" ] && echo '(set)' || echo '(not set)'

	echo -n '- GPG_PASSPHRASE: '
	[ -n "$GPG_PASSPHRASE" ] && echo '(set)' || echo '(not set)'
}

download_existing_repo()
{
	echo "## Downloading existing repo"
	mkdir -p "$REPO_DIR/dists/stable/main/binary-all"
	az storage blob download \
		--account-name "$AZ_STORAGE_ACCOUNT" \
		--container-name "$AZ_STORAGE_CONTAINER" \
		--name "dists/stable/main/binary-all/Packages.gz" \
		--file "$REPO_DIR/dists/stable/main/binary-all/Packages.gz"
}

build_local_repo()
{
	echo "## Building local repo"

	if [ -n "$GPG_PRIV_KEY" ]; then
		mkdir -p /gpg

		export GPG_KEY_FILE=/gpg/privkey.asc
		echo "* Saving GPG key as $GPG_KEY_FILE"
		echo -n "$GPG_PRIV_KEY" >"$GPG_KEY_FILE"
	fi

	if [ -n "$GPG_PASSPHRASE" ]; then
		export GPG_KEY_PASSPHRASE_FILE=/gpg/key-password
		echo "* Saving GPG passphrase as $GPG_KEY_PASSPHRASE_FILE"
		echo -n "$GPG_PASSPHRASE" >"$GPG_KEY_PASSPHRASE_FILE"
	fi

	export REPO_DIR
	export PKGS_SRC
	"$SCRIPT_DIR/repo-apt-handle"
}

upload_repo()
{
	echo "## Uploading repo"
	ls -alR "$REPO_DIR"
	az storage blob upload-batch \
		--account-name "$AZ_STORAGE_ACCOUNT" \
		--destination "$AZ_STORAGE_CONTAINER" \
		--overwrite \
		--source "$REPO_DIR"
}

show_summary_info
download_existing_repo || :
build_local_repo
upload_repo
