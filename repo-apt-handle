#!/bin/sh -e

# Handles operations with Debian apt repository: given a set of packages and
# a local repo directory, either creates repo from scratch, or appends new
# packages to an existing repo. Takes care of creating minimal required set
# of files and directories in the repo, as well as signing with GPG key.
#
# Input:
# - REPO_DIR: local directory where the repo will be created or updated (default: `repo0`)
# - PKGS_SRC: list of .deb files to add to the repo (default: `all_pkgs/*.deb`)
# - GPG_KEY_FILE: path to GPG private key file
# - GPG_KEY_PASSPHRASE_FILE: path to file with GPG key passphrase
# - GPG_KEY_ID: GPG key ID to use for signing (default: `test-key@kaitai.io`)
#
# Usage:
# - For creating a new repo: just provide the input variables and run the script
# - For updating an existing repo:
#   - download /dists/stable/main/binary-$REPO_ARCH/Packages.gz from existing (remote) repo
#   - bootstrap local repo copy with the above file
#   - run the script, pointing to local repo dir (REPO_DIR) and new packages (PKGS_SRC)
#   - after the script finishes, upload full contents of REPO_DIR to remote storage,
#     overwriting existing files

: "${REPO_DIR:=repo0}"
: "${REPO_ARCH:=all}"
: "${GPG_KEY_FILE:=gpg/repo-privkey.asc}"
: "${GPG_KEY_PASSPHRASE_FILE:=gpg/key-password}"
: "${GPG_KEY_ID:=test-key@kaitai.io}"

if [ -z "$PKGS_SRC" ]; then
	PKGS_SRC=all_pkgs/*.deb
fi

cat <<EOF
REPO_DIR: $REPO_DIR
REPO_ARCH: $REPO_ARCH
GPG_KEY_FILE: $GPG_KEY_FILE
GPG_KEY_PASSPHRASE_FILE: $GPG_KEY_PASSPHRASE_FILE
GPG_KEY_ID: $GPG_KEY_ID
PKGS_SRC: [$PKGS_SRC]
EOF

install_dependencies()
{
	apt-get update
	apt-get install -y dpkg-dev
}

repo_cleanup()
{
	rm -rf "$REPO_DIR"
}

repo_hash()
{
	local hash_name="$1"
	local hash_cmd="$2"
	echo "$hash_name:"
	for f in $(find -type f); do
		f=$(echo "$f" | cut -c3-) # remove ./ prefix
		if [ "$(basename "$f")" = Release ]; then
			continue
		fi
		hash_hex=$("$hash_cmd" "$f" | cut -d' ' -f1)
		echo " $hash_hex $(wc -c $f)"
	done
}

# Create basic repo directory structure and copy packages into pool dir
repo_copy_pool_files()
{
	echo "### copy_pool_files"

	mkdir -p \
		"$REPO_DIR/pool/main" \
		"$REPO_DIR/dists/stable/main/binary-$REPO_ARCH"
	cp --verbose $PKGS_SRC "$REPO_DIR/pool/main"
}

repo_create_packages()
{
	echo "### repo_create_packages"

	cd "$REPO_DIR"
	dpkg-scanpackages --multiversion pool >"dists/stable/main/binary-$REPO_ARCH/Packages"
	cat "dists/stable/main/binary-$REPO_ARCH/Packages" |
		gzip -9 >"dists/stable/main/binary-$REPO_ARCH/Packages.gz"
}

repo_append_packages()
{
	echo "### repo_append_packages"

	cd "$REPO_DIR"
	gunzip "dists/stable/main/binary-$REPO_ARCH/Packages.gz"
	dpkg-scanpackages --multiversion pool >>"dists/stable/main/binary-$REPO_ARCH/Packages"
	cat "dists/stable/main/binary-$REPO_ARCH/Packages" |
		gzip -9 >"dists/stable/main/binary-$REPO_ARCH/Packages.gz"
}

repo_create_release()
{
	echo "### repo_create_release"

	cd "$REPO_DIR/dists/stable"
	cat >Release <<EOF
Origin: Kaitai project
Label: stable
Suite: stable
Codename: stable
Version: 1.0
Architectures: $REPO_ARCH
Components: main
Description: Kaitai Debian software repository
Date: $(date -Ru)
EOF

	repo_hash MD5Sum md5sum >>Release
	repo_hash SHA1 sha1sum >>Release
	repo_hash SHA256 sha256sum >>Release

	ls -al "$REPO_DIR/dists/stable"
}

repo_create_release_pgp()
{
	echo "### repo_create_release_pgp"

	gpg --batch --yes --passphrase-file "$GPG_KEY_PASSPHRASE_FILE" --import <"$GPG_KEY_FILE"
	gpg --list-keys

	# Rather complicated way to persuade gpg to work in batch mode.
	# This specific way seems to work on Ubuntu 24.04
	# See https://unix.stackexchange.com/questions/60213/gpg-asks-for-password-even-with-passphrase
	cat "$GPG_KEY_PASSPHRASE_FILE" |
		gpg \
			--batch --yes --default-key "$GPG_KEY_ID" \
			--sign \
			--detach-sign \
			--armor \
			--pinentry-mode loopback \
			--passphrase-fd 0 \
			--output "$REPO_DIR/dists/stable/Release.gpg" \
			"$REPO_DIR/dists/stable/Release"
}

repo_create()
{
	repo_copy_pool_files

	if [ -r "$REPO_DIR/dists/stable/main/binary-$REPO_ARCH/Packages.gz" ]; then
		repo_append_packages
	else
		repo_create_packages
	fi
	repo_create_release
	repo_create_release_pgp
}

# Make paths absolute
GPG_KEY_FILE=$(realpath "$GPG_KEY_FILE")
GPG_KEY_PASSPHRASE_FILE=$(realpath "$GPG_KEY_PASSPHRASE_FILE")
REPO_DIR=$(realpath "$REPO_DIR")

#install_dependencies
#repo_cleanup
repo_create
